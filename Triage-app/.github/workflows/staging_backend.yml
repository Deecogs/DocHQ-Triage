name: Staging Build and Deploy (BE)

env:
  SERVICE_EMAIL: github-actions-staging@dochq-staging.iam.gserviceaccount.com
  PROJECT_ID: dochq-staging
  SERVICE: triage-backend
  ENVIRONMENT: staging
  REGION: europe-west1
  INSTANCE_CONNECTION_NAME: dochq-staging:europe-west2:dochq-staging-postgresql
  DATABASE_URL: "user=postgres password=${{ secrets.STAGING_CLOUDSQL_PASSWORD }} host=/cloudsql/dochq-staging:europe-west2:dochq-staging-postgresql dbname=triage sslmode=disable"
  DATABASE_PROXY_URL: "user=postgres password=${{ secrets.STAGING_CLOUDSQL_PASSWORD }} host=127.0.0.1 port=5432 dbname=triage sslmode=disable"

on:
  workflow_dispatch

jobs:
  docker-publish:
    name: Docker image publish
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: auth service account
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.STAGING_CLOUD_RUN_KEY_JSON }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: |
          gcloud auth configure-docker europe-west2-docker.pkg.dev && \
          gcloud config set project ${{ env.PROJECT_ID }}

      - name: Docker Build
        run: |
          MAJOR_MINOR_PATCH=$(bash version.sh print_major_minor_patch)
          CONTAINER_URI=europe-west2-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}
          docker build \
            -t ${CONTAINER_URI}:latest \
            -t ${CONTAINER_URI}:${MAJOR_MINOR_PATCH} \
            --build-arg="APP_VERSION=${MAJOR_MINOR_PATCH}" \
            ./backend
      
      - name: Docker Publish
        run: |
          MAJOR_MINOR_PATCH=$(bash version.sh print_major_minor_patch)
          docker push europe-west2-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:latest  
          docker push europe-west2-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${MAJOR_MINOR_PATCH}

      - name: Cleanup revisions
        run: |
          gcloud run revisions list \
            --region=${{ env.REGION }} \
            --service=${{ env.SERVICE }} \
            --sort-by="~createTime" \
            --format="value(metadata.name)" \
            | tail -n +11 \
            | xargs -I {} gcloud run revisions delete {} \
            --region=${{ env.REGION }} \
            --quiet

      - name: Cleanup artifacts
        run: |
          CONTAINER_URI=europe-west2-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}
          gcloud artifacts docker images list ${CONTAINER_URI} \
            --sort-by="~updateTime" \
            --format="value(DIGEST)" \
            | tail -n +11 \
            | xargs -I {} gcloud artifacts docker images delete ${CONTAINER_URI}@{} \
            --quiet --delete-tags

  release:
    name: Release
    needs: [docker-publish]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: auth service account
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.STAGING_CLOUD_RUN_KEY_JSON }}'
            
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
  
      - name: Get Cloud SQL Proxy
        run: |
          wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy

      - name: Run migrations 
        timeout-minutes: 30
        working-directory: ./backend
        run: |
          mkdir cloudsql_proxy
          (../cloud_sql_proxy -dir=cloudsql_proxy -instances=${{ env.INSTANCE_CONNECTION_NAME }}=tcp:5432 & sleep 15) && go run cmd/migrate/main.go
  
      - name: Configure Docker
        run: |
          gcloud auth configure-docker europe-west2-docker.pkg.dev && \
          gcloud config set project ${{ env.PROJECT_ID }}

      - name: Deploy
        run: |
          MAJOR_MINOR_PATCH=$(bash version.sh print_major_minor_patch)
          IMAGE=europe-west2-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${MAJOR_MINOR_PATCH}
          gcloud run deploy ${{ env.SERVICE }} --image ${IMAGE} --region ${{ env.REGION }} --allow-unauthenticated --add-cloudsql-instances=${{ env.INSTANCE_CONNECTION_NAME }} --cpu-throttling \
            --set-env-vars ENVIRONMENT=${{ env.ENVIRONMENT }} \
            --set-env-vars DATABASE_URL="${{ env.DATABASE_URL }}" \

